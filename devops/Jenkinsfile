pipeline {
  agent {
    node {
      label 'python'
    }
  }
    parameters {
        string(name:'MANUAL_DEPLOY',defaultValue: 'no',description:'是否')

        string(name:'REGISTRY',defaultValue: 'harbor.wuxs.vip:30003',description:'组织')
        string(name:'REPOSITORY',defaultValue: 'tkeel-io',description:'仓库')

        string(name:'DOCKER_IMAGE_TAG',defaultValue: '0.1.0',description:'镜像版本')
        string(name:'HELM_CHART_VERSION',defaultValue: '0.1.0',description:'插件版本')

    }

    environment {
        /*
        tips:应用变量
        */
        APP_NAME = 'iothub'
        CHART_PATH = 'charts'
        DOCKERFILES_PATH = 'Dockerfile'
        
        /*
        凭证信息
        */
        PRIVATE_REPO_CREDENTIAL_ID = 'harbor'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'

        /*
        配置,从凭证中读取
        */
        PRIVATE_REPO_CONFIG = 'private-repo'
        PLUGIN_CONFIG = 'tkeel-plugin-config'
    }

    stages {
        stage ('checkout scm') {
            steps {
                checkout(scm)
            }
        }

        stage('get config'){
            /*
            从凭证中读取配置
            */
            steps {
                container ('python'){
                    withCredentials([usernamePassword(credentialsId: "$PRIVATE_REPO_CONFIG", usernameVariable: 'registry',passwordVariable: 'repository')]) {
                        script {
                            env.REGISTRY = registry
                            env.REPOSITORY = repository
                            }
                        }

                    withCredentials([usernamePassword(credentialsId: "$PRIVATE_REPO_CREDENTIAL_ID", usernameVariable: 'username',passwordVariable: 'password')]) {
                        script {
                            env.USERNAME = username
                            env.PASSWORD = password
                            }
                        }

                    withCredentials([usernamePassword(credentialsId: "$PLUGIN_CONFIG", usernameVariable: 'enable_config',passwordVariable: 'config')]) {
                        script {
                            env.TKEEL_PLUGIN_ENABLE_UPGRADE = enable_config
                            env.TKEEL_PLUGIN_CONFIG = config
                            }
                        }
                    }
                }
            }

        stage('set env'){
            environment {
                COMMIT_ID = "${sh(script:'git rev-parse --short HEAD',returnStdout:true)}"
                TIMESTAMP = "${sh(script:'date -d "+8 hour" "+%m.%d.%H%M%S"',returnStdout:true)}"
            }
            steps {
                container ('python'){
                    script {
                        if (params.MANUAL_DEPLOY == "yes"){
                            /*
                            重写 REGISTRY & REPOSITORY
                            */
                            env.REGISTRY = params.REGISTRY
                            env.REPOSITORY = params.REPOSITORY
                            env.DOCKER_IMAGE_TAG = params.DOCKER_IMAGE_TAG
                            env.DOCKER = env.REGISTRY + "/" + env.REPOSITORY + "/" + env.APP_NAME  + ":" + env.DOCKER_IMAGE_TAG
                            env.CHART = params.HELM_CHART_VERSION
                            env.TKEEL_PLUGIN_ENABLE_UPGRADE = 'yes'
                        }else{
                            env.DOCKER_IMAGE_TAG = env.COMMIT_ID
                            env.DOCKER =  env.REGISTRY + "/" + env.REPOSITORY + "/" + env.APP_NAME  + ":" + env.DOCKER_IMAGE_TAG
                            env.CHART = env.TIMESTAMP
                        }
                    }
                }
            }
        }

        stage('build & push') {
            environment {
                /*
                helm 环境变量
                */
                HELM_EXPERIMENTAL_OCI=1
            }
            steps {
                container ('python') {

                    script{
                        if(params.TKEEL_PLUGIN_ENABLE_UPGRADE == "no"){
                            sh 'echo do nothing'                            
                        }else{
                            /*
                            edit chart
                            */
                            env.values_repository = env.REGISTRY + "/" + env.REPOSITORY + "/" + env.APP_NAME
                            sh 'python3 devops/scripts/kotb.py write charts/values.yaml charts/values.yaml $values_repository'

                            /*
                            package helm chart
                            */
                            sh 'helm3 registry login -u $USERNAME -p $PASSWORD $REGISTRY'
                            sh 'helm3 package $CHART_PATH --version=$CHART --app-version=$DOCKER_IMAGE_TAG' 
                            sh 'helm3 cm-push $APP_NAME-*.tgz https://$REGISTRY/chartrepo/$REPOSITORY --username=$USERNAME --password=$PASSWORD'

                            /*
                            build docker image
                            */
                            sh 'docker login -u $USERNAME -p $PASSWORD https://$REGISTRY'
                            sh 'docker build -f $DOCKERFILES_PATH -t $DOCKER .'
                            sh 'docker push $DOCKER'
                        }
                    }
                }
            }
        }
 
        stage('install or upgrade plugin') {
            steps {
                container ('python') {
                    withCredentials([kubeconfigFile(credentialsId: env.KUBECONFIG_CREDENTIAL_ID,variable: 'KUBECONFIG')]) {
                        script {                        
                            if (env.TKEEL_PLUGIN_ENABLE_UPGRADE == 'yes' || params.MANUAL_DEPLOY == "yes"){
                                sh 'tkeel admin login -p changeme'
                                sh 'mv devops/config/$TKEEL_PLUGIN_CONFIG ~/.tkeel/config.yaml'
                                sh 'tkeel plugin upgrade $REPOSITORY/$APP_NAME@$CHART $APP_NAME'
                            }else{
                                sh 'echo do not install or upgrade'
                            }
                        }
                    }                
                }
            }
        }
    }
}